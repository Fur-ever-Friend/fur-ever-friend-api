
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  password  String
  firstname String
  lastname  String
  phone     String

  Petsitter Petsitter[]

  Customer Customer[]

  Admin Admin[]
}

model Petsitter {
  id             String @id @default(uuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  information    String
  rating         String
  account_status String
  certificate    String

  Activity Activity[]

  Petsitter_Request Petsitter_Request[]

  Activity_Progress Activity_Progress[]

  Activity_Payment Activity_Payment[]
}

model Customer {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  account_status String

  Activity Activity[]
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Activity {
  id             String   @id @default(uuid())
  title          String
  description    String
  created_at     DateTime
  updated_at     DateTime
  start_datetime DateTime
  end_datetime   DateTime
  pick_up_point  String
  state          String
  price          Float

  customer    Customer @relation(fields: [customer_id], references: [id])
  customer_id String

  petsitter    Petsitter @relation(fields: [petsitter_id], references: [id])
  petsitter_id String

  Petsitter_Request Petsitter_Request[]

  Activity_Progress Activity_Progress[]

  Activity_Payment Activity_Payment[]

  Pet_Service      Pet_Service[]

  Activity_Checkbox Activity_Checkbox[]
}

model Activity_Progress {
  id         String   @id @default(uuid())
  created_at DateTime
  content    String

  activity    Activity @relation(fields: [activity_id], references: [id])
  activity_id String

  petsitter    Petsitter @relation(fields: [petsitter_id], references: [id])
  petsitter_id String
}

model Activity_Payment {
  id     String @id @default(uuid())
  status String

  activity    Activity @relation(fields: [activity_id], references: [id])
  activity_id String

  petsitter    Petsitter @relation(fields: [petsitter_id], references: [id])
  petsitter_id String
}

model Activity_Checkbox {
  id      String  @id @default(uuid())
  checked Boolean

  activity    Activity @relation(fields: [activity_id], references: [id])
  activity_id String

  pet_service    Pet_Service @relation(fields: [pet_service_id], references: [id])
  pet_service_id String
}

model Payment {
  id             String   @id @default(uuid())
  timestamp      DateTime
  amount         Float
  state          State
  transaction_id String
  payment_mothod String
}

model Qualification {
  id            String @id @default(uuid())
  email         String @unique
  password      String
  firstname     String
  lastname      String
  phone         String
  certification String
  State         State
}

model Pet {
  id        String @id @default(uuid())
  name      String
  age       Int
  size      Size
  image_url String
  gender    String

  animal_type    Animal_Type @relation(fields: [animal_type_id], references: [id])
  animal_type_id String

  breed    Breed  @relation(fields: [breed_id], references: [id])
  breed_id String

  Pet_Service Pet_Service[]
}

model Animal_Type {
  id   String @id @default(uuid())
  name String

  Pet Pet[]
}

model Breed {
  id   String @id @default(uuid())
  name String

  Pet Pet[]
}

model Petsitter_Request {
  id         String   @id @default(uuid())
  created_at DateTime
  state      State
  price      Float

  activity    Activity @relation(fields: [activity_id], references: [id])
  activity_id String

  petsitter    Petsitter @relation(fields: [petsitter_id], references: [id])
  petsitter_id String
}

model Pet_Service {
  id String @id @default(uuid())

  pet    Pet    @relation(fields: [pet_id], references: [id])
  pet_id String

  service_type    Service_Type @relation(fields: [service_type_id], references: [id])
  service_type_id String

  activity    Activity @relation(fields: [activity_id], references: [id])
  activity_id String

  Activity_Checkbox Activity_Checkbox[]
}

model Service_Type {
  id          String @id @default(uuid())
  name        String
  description String

  Pet_Service Pet_Service[]
}

enum Role {
  UNREGISTER
  CUSTOMER
  PETSITTER
  ADMIN
}

enum State {
  PENDING
  ACCEPTED
  REJECTED
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}
