generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstname String
  lastname  String
  phone     String?
  role      Role

  customer     Customer?
  petsitter    Petsitter?
  admin        Admin?
  reporterList Report[]   @relation("reporter")
  reportedList Report[]   @relation("reported")

  @@map("users")
}

model Petsitter {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @unique @map("user_id")
  information    String
  rating         Float        @default(4.0)
  accountStatus  AccountState @default(ACTIVE) @map("account_status")
  certificateUrl String       @map("certificate_url")

  activities Activity[]

  requests PetsitterRequest[]

  @@map("petsitters")
}

model Customer {
  id            String       @id @default(uuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @unique @map("user_id")
  accountStatus AccountState @default(ACTIVE) @map("account_status")

  activities Activity[]

  @@map("customers")
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("admins")
}

model Activity {
  id            String        @id @default(uuid())
  title         String
  description   String
  createdAt     DateTime
  updatedAt     DateTime
  startDateTime DateTime
  endDateTime   DateTime
  pickupPoint   String
  state         ActivityState @default(PENDING)
  price         Float         @default(0)

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id])
  petsitterId String    @map("petsitter_id")

  requests PetsitterRequest[]

  progresses ActivityProgress[]

  payments ActivityPayment[]

  services ActivityService[]

  review Review?

  @@map("activities")
}

model ActivityProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  images ProgressImage[]

  @@map("activity_progresses")
}

model ProgressImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  url                String
  activityProgress   ActivityProgress @relation(fields: [activityProgressId], references: [id])
  activityProgressId String           @map("activity_progress_id")

  @@map("progress_images")
}

model ActivityPayment {
  id    String @id @default(uuid())
  state State  @default(PENDING)

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  @@map("activity_payments")
}

model Payment {
  id            String        @id @default(uuid())
  timestamp     DateTime
  amount        Float
  state         State         @default(PENDING)
  transactionId String        @unique @map("transaction_id")
  paymentMethod PaymentMethod @default(CREDIT_CARD)

  @@map("payments")
}

model Qualification {
  id             String @id @default(uuid())
  email          String @unique
  password       String
  firstname      String
  lastname       String
  phone          String
  state          State
  certificateUrl String @map("certificate_url")

  @@map("qualifications")
}

model Pet {
  id       String @id @default(uuid())
  name     String
  age      Int
  weight   Float
  imageUrl String
  gender   Gender

  animalType   AnimalType @relation(fields: [animalTypeId], references: [id])
  animalTypeId String     @map("animal_type_id")

  breed   Breed  @relation(fields: [breedId], references: [id])
  breedId String @map("breed_id")

  services ActivityService[]

  @@map("pets")
}

model AnimalType {
  id   String @id @default(uuid())
  name String

  pets   Pet[]
  breeds Breed[]

  @@map("animal_types")
}

model Breed {
  id   String @id @default(uuid())
  name String

  animalType   AnimalType @relation(fields: [animalTypeId], references: [id])
  animalTypeId String     @map("animal_type_id")

  pets Pet[]

  @@map("breeds")
}

model PetsitterRequest {
  id        String   @id @default(uuid())
  createdAt DateTime
  state     State
  price     Float
  message   String?

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id])
  petsitterId String    @map("petsitter_id")

  @@map("petsitter_requests")
}

model ActivityService {
  id String @id @default(uuid())

  pet   Pet    @relation(fields: [petId], references: [id])
  petId String @map("pet_id")

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String  @map("service_type_id")

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  status Boolean

  @@map("pet_services")
}

model Service {
  id          String @id @default(uuid())
  serviceType String @unique @map("service_type")
  description String

  services ActivityService[]

  @@map("service_types")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime
  content   String
  rating    Float

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @unique

  @@map("reviews")
}

model Report {
  id          String        @id @default(uuid())
  createdAt   DateTime
  content     String
  reportImage ReportImage[]

  reporter   User   @relation("reporter", fields: [reporterId], references: [id])
  reporterId String

  reported   User   @relation("reported", fields: [reportedId], references: [id])
  reportedId String

  @@map("reports")
}

model ReportImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  url      String
  report   Report @relation(fields: [reportId], references: [id])
  reportId String

  @@map("report_images")
}

enum Role {
  UNREGISTER @map("UNREGISTER")
  CUSTOMER   @map("CUSTOMER")
  PETSITTER  @map("PETSITTER")
  ADMIN      @map("ADMIN")

  @@map("roles")
}

enum State {
  PENDING  @map("PENDING")
  ACCEPTED @map("ACCEPTED")
  REJECTED @map("REJECTED")

  @@map("states")
}

enum AccountState {
  ACTIVE   @map("ACTIVE")
  INACTIVE @map("INACTIVE")

  @@map("account_states")
}

enum ActivityState {
  PENDING   @map("PENDING")
  ACCEPTED  @map("ACCEPTED")
  REJECTED  @map("REJECTED")
  CANCELLED @map("CANCELLED")
  COMPLETED @map("COMPLETED")

  @@map("activity_states")
}

enum PaymentMethod {
  CREDIT_CARD @map("CREDIT_CARD")
  PAYPAL      @map("PAYPAL")
  CASH        @map("CASH")

  @@map("payment_methods")
}

enum Gender {
  MALE    @map("MALE")
  FEMAIL  @map("FEMAIL")
  UNKNOWN @map("UNKNOWN")

  @@map("genders")
}

enum ServiceType {
  PET_SITTING    @map("PET_SITTING")
  PET_WALKING    @map("PET_WALKING")
  PET_GROOMING   @map("PET_GROOMING")
  PET_TRAINING   @map("PET_TRAINING")
  PET_FEEDING    @map("PET_FEEDING")
  PET_MEDICATION @map("PET_MEDICATION")

  @@map("service_types")
}
