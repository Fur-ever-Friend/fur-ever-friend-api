generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  firstname     String?      @db.VarChar(30)
  lastname      String?      @db.VarChar(30)
  avatar        String?
  phone         String?      @db.VarChar(20)
  refreshToken  String?      @unique @map("refresh_token")
  role          Role
  accountStatus AccountState @default(ACTIVE) @map("account_status")
  createdAt     DateTime     @default(now()) @map("created_at")

  customer      Customer?
  petsitter     Petsitter?
  admin         Admin?
  reporterList  Report[]       @relation("reporter")
  reportedList  Report[]       @relation("reported")
  notifications Notification[]

  @@map("users")
}

model Petsitter {
  id             String     @id @default(uuid())
  user           User       @relation(fields: [userId], references: [id])
  userId         String     @unique @map("user_id")
  quote          String     @default("")
  location       String     @default("")
  about          String     @default("")
  experience     String     @default("")
  rating         Float      @default(4.0)
  certificateUrl String     @map("certificate_url")
  coverImages    String[]   @map("cover_images")
  activities     Activity[]
  serviceTags    String[]   @map("service_tags")

  requests   PetsitterRequest[]
  favourites Favourite[]

  invitations Invitation[]
  reviews     Review[]

  @@map("petsitters")
}

model Customer {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  activities Activity[]
  pets       Pet[]
  favourites Favourite[]

  @@map("customers")
}

model Favourite {
  id          String    @id @default(uuid())
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String    @map("customer_id")
  petsitter   Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)
  petsitterId String    @map("petsitter_id")

  @@unique([customerId, petsitterId])
  @@map("favourites")
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("admins")
}

model Activity {
  id            String        @id @default(uuid())
  title         String
  detail        String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  startDateTime DateTime      @map("start_date_time")
  endDateTime   DateTime      @map("end_date_time")
  pickupPoint   String        @map("pickup_point")
  state         ActivityState @default(PENDING)
  price         Float?

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @map("customer_id")

  petsitter   Petsitter? @relation(fields: [petsitterId], references: [id], onDelete: SetNull)
  petsitterId String?    @map("petsitter_id")

  requests PetsitterRequest[]

  progresses ActivityProgress[]

  services ActivityService[]

  payments Payment[]
  review   Review?

  invitation Invitation[]

  @@map("activities")
}

model ActivityProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  images String[]

  @@map("activity_progresses")
}

model Payment {
  id            String       @id @default(uuid())
  timestamp     DateTime     @default(now())
  amount        Float
  state         PaymentState @default(PENDING)
  transactionId String       @unique @map("transaction_id")
  activity      Activity     @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId    String       @unique @map("activity_id")

  @@map("payments")
}

model Qualification {
  id             String   @id @default(uuid())
  email          String   @unique @db.VarChar(50)
  password       String
  firstname      String   @db.VarChar(30)
  lastname       String   @db.VarChar(30)
  phone          String   @db.VarChar(20)
  state          State    @default(PENDING)
  certificateUrl String   @map("certificate_url")
  createdAt      DateTime @default(now()) @map("created_at")

  @@map("qualifications")
}

model Pet {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(20)
  age         Int
  weight      Float
  imageUrl    String  @map("image_url")
  gender      Gender
  personality String?
  allergy     String?
  otherDetail String? @map("other_detail")

  animalType   AnimalType? @relation(fields: [animalTypeId], references: [id], onDelete: SetNull)
  animalTypeId String?     @map("animal_type_id")

  breed   Breed?  @relation(fields: [breedId], references: [id], onDelete: SetNull)
  breedId String? @map("breed_id")

  ownerId String   @map("owner_id")
  owner   Customer @relation(fields: [ownerId], references: [id])

  services ActivityService[]

  @@map("pets")
}

model AnimalType {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(30)

  pets   Pet[]
  breeds Breed[]

  @@map("animal_types")
}

model Breed {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(30)

  animalType   AnimalType? @relation(fields: [animalTypeId], references: [id], onDelete: SetNull)
  animalTypeId String?     @map("animal_type_id")

  pets Pet[]

  @@map("breeds")
}

model PetsitterRequest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  state     State    @default(PENDING)
  price     Float?
  message   String?

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)
  petsitterId String    @map("petsitter_id")

  @@map("petsitter_requests")
}

model Task {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now()) @map("created_at")
  status    Boolean     @default(false)
  type      ServiceType @map("service_type")
  detail    String

  activityServiceId String          @map("activity_service_id")
  activityService   ActivityService @relation(fields: [activityServiceId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ActivityService {
  id String @id @default(uuid())

  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String @map("pet_id")

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  tasks Task[]

  @@map("activity_services")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String
  rating    Int

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @unique @map("activity_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id])
  petsitterId String    @map("petsitter_id")

  @@map("reviews")
}

model Report {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  type         ReportType
  content      String
  reportImages String[]   @map("report_images")

  reporter   User   @relation("reporter", fields: [reporterId], references: [id])
  reporterId String @map("reporter_id")

  reported   User   @relation("reported", fields: [reportedId], references: [id])
  reportedId String @map("reported_id")

  @@map("reports")
}

model Invitation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id])
  petsitterId String    @map("petsitter_id")

  link String

  @@map("invitations")
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  title     String
  content   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("notifications")
}

enum ReportType {
  SERVICE_QUALITY
  CUSTOMER_BEHAVIOR
  UNPROFESSIONAL_CONDUCT
  INAPPROPRIATE_COMMUNICATION
  OTHER

  @@map("report_types")
}

enum Role {
  CUSTOMER
  PETSITTER
  ADMIN

  @@map("roles")
}

enum State {
  PENDING
  ACCEPTED
  REJECTED

  @@map("states")
}

enum AccountState {
  ACTIVE
  INACTIVE
  BANNED

  @@map("account_states")
}

enum PaymentState {
  PENDING
  SUCCEEDED
  FAILED

  @@map("payment_states")
}

enum ActivityState {
  PENDING // Petsitter: Requested, Customer: Unassigned
  REJECTED // for petsitter after customer rejected
  CANCELLED // activity has been cancelled by customer
  ASSIGNED // Petsitter: Scheduled, Customer: Assigned
  IN_PROGRESS // for petsitter after customer accepted
  RETURNING // for petsitter after activity end
  FAILED // activity failed
  COMPLETED // activity completed

  @@map("activity_states")
}

enum Gender {
  MALE
  FEMALE

  @@map("genders")
}

enum ServiceType {
  FEEDING
  GROOMING
  EXERCISING
  TRAINING
  ADMINISTERING_MEDICATION
  RELAXATION

  @@map("service_types")
}
