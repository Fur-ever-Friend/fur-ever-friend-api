generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  firstname     String?      @db.VarChar(30)
  lastname      String?      @db.VarChar(30)
  phone         String?      @db.VarChar(20)
  refreshToken  String?      @unique @map("refresh_token")
  role          Role
  accountStatus AccountState @default(ACTIVE) @map("account_status")

  customer     Customer?
  petsitter    Petsitter?
  admin        Admin?
  reporterList Report[]   @relation("reporter")
  reportedList Report[]   @relation("reported")

  @@map("users")
}

model Petsitter {
  id             String @id @default(uuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique @map("user_id")
  information    String @default("")
  rating         Float  @default(4.0)
  certificateUrl String @map("certificate_url")

  activities Activity[]

  requests            PetsitterRequest[]
  petsitterServiceTag PetsitterServiceTag[]
  favorites           Favorite[]

  invitation          Invitation[]

  @@map("petsitters")
}

model PetsitterServiceTag {
  id          String      @id @default(uuid())
  serviceType ServiceType @map("service_type")
  petsitter   Petsitter   @relation(fields: [petsitterId], references: [id])
  petsitterId String      @map("petsitter_id")

  @@map("petsitter_service_tags")
}

model Customer {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  activities Activity[]
  pets       Pet[]
  favorites  Favorite[]

  @@map("customers")
}

model Favorite {
  id          String    @id @default(uuid())
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String    @map("customer_id")
  petsitter   Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)
  petsitterId String    @map("petsitter_id")

  @@map("favorites")
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  @@map("admins")
}

model Activity {
  id            String        @id @default(uuid())
  name          String
  detail        String
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  startDateTime DateTime      @map("start_date_time")
  endDateTime   DateTime      @map("end_date_time")
  pickupPoint   String        @map("pickup_point")
  state         ActivityState @default(PENDING)
  price         Float?

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @map("customer_id")

  petsitter   Petsitter? @relation(fields: [petsitterId], references: [id])
  petsitterId String?    @map("petsitter_id")

  pet          Pet       @relation(fields: [petId], references: [id])
  petId        String
  
  requests PetsitterRequest[]

  progresses ActivityProgress[]

  services ActivityService[]

  payments   Payment[]
  review     Review?

  invitation Invitation[]

  @@map("activities")
}

model ActivityProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String

  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @map("activity_id")

  images ProgressImage[]

  @@map("activity_progresses")
}

model ProgressImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  imageUrl           String           @map("image_url")
  activityProgress   ActivityProgress @relation(fields: [activityProgressId], references: [id])
  activityProgressId String           @map("activity_progress_id")

  @@map("progress_images")
}

model Payment {
  id            String   @id @default(uuid())
  timestamp     DateTime @default(now())
  amount        Float
  state         State    @default(PENDING)
  transactionId String   @unique @map("transaction_id")
  activity      Activity @relation(fields: [activityId], references: [id])
  activityId    String   @unique @map("activity_id")

  @@map("payments")
}

model Qualification {
  id             String @id @default(uuid())
  email          String @unique @db.VarChar(50)
  password       String
  firstname      String @db.VarChar(30)
  lastname       String @db.VarChar(30)
  phone          String @db.VarChar(20)
  state          State  @default(PENDING)
  certificateUrl String @map("certificate_url")

  @@map("qualifications")
}

model Pet {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(20)
  age         Int
  weight      Float
  imageUrl    String  @map("image_url")
  gender      Gender
  personality String?
  allergy     String?
  otherDetail String? @map("other_detail")

  animalType   AnimalType? @relation(fields: [animalTypeId], references: [id], onDelete: SetNull)
  animalTypeId String?     @map("animal_type_id")

  breed   Breed?  @relation(fields: [breedId], references: [id], onDelete: SetNull)
  breedId String? @map("breed_id")

  ownerId String   @map("owner_id")
  owner   Customer @relation(fields: [ownerId], references: [id])

  services ActivityService[]

  @@map("pets")
  Activity Activity[]
}

model AnimalType {
  id   String @id @default(uuid())
  name String @db.VarChar(30)

  pets   Pet[]
  breeds Breed[]

  @@map("animal_types")
}

model Breed {
  id   String @id @default(uuid())
  name String @db.VarChar(30)

  animalType   AnimalType? @relation(fields: [animalTypeId], references: [id], onDelete: SetNull)
  animalTypeId String?     @map("animal_type_id")

  pets Pet[]

  @@map("breeds")
}

model PetsitterRequest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  state     State    @default(PENDING)
  price     Float?
  message   String?

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id])
  petsitterId String    @map("petsitter_id")

  @@map("petsitter_requests")
}

model ActivityService {
  id String @id @default(uuid())

  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String @map("pet_id")

  detail String

  serviceType ServiceType @map("service_type")

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  status Boolean @default(false)

  @@map("activity_services")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String
  rating    Int

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @unique @map("activity_id")

  @@map("reviews")
}

model Report {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  type        ReportType
  content     String
  reportImage ReportImage[]

  reporter   User   @relation("reporter", fields: [reporterId], references: [id])
  reporterId String @map("reporter_id")

  reported   User   @relation("reported", fields: [reportedId], references: [id])
  reportedId String @map("reported_id")

  @@map("reports")
}

model ReportImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  imageUrl  String   @map("image_url")
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String   @map("report_id")

  @@map("report_images")
}

model Invitation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id])
  petsitterId String    @map("petsitter_id")

  link String

  @@map("invitations")
}

enum ReportType {
  SERVICE_QUALITY
  CUSTOMER_BEHAVIOR
  UNPROFESSIONAL_CONDUCT
  INAPPROPRIATE_COMMUNICATION
  OTHER

  @@map("report_types")
}

enum Role {
  CUSTOMER
  PETSITTER
  ADMIN

  @@map("roles")
}

enum State {
  PENDING
  ACCEPTED
  REJECTED

  @@map("states")
}

enum AccountState {
  ACTIVE
  INACTIVE
  BANNED

  @@map("account_states")
}

enum ActivityState {
  PENDING // Petsitter: Requested, Customer: Unassigned
  REJECTED // for petsitter after customer rejected
  CANCELLED // activity has been cancelled by customer
  ASSIGNED // Petsitter: Scheduled, Customer: Assigned
  IN_PROGRESS // for petsitter after customer accepted
  RETURNING // for petsitter after activity end
  FAILED // activity failed
  COMPLETED // activity completed

  @@map("activity_states")
}

enum Gender {
  MALE
  FEMALE

  @@map("genders")
}

enum ServiceType {
  PET_WALKING
  PET_BOARDING
  PET_GROOMING

  @@map("service_types")
}
