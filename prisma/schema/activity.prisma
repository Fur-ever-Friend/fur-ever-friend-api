model Activity {
  id            String        @id @default(uuid())
  title         String
  detail        String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  startDateTime DateTime      @map("start_date_time")
  endDateTime   DateTime      @map("end_date_time")
  pickupPoint   String        @map("pickup_point")
  state         ActivityState @default(PENDING)
  price         Float?

  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @map("customer_id")

  petsitter   Petsitter? @relation(fields: [petsitterId], references: [id], onDelete: SetNull)
  petsitterId String?    @map("petsitter_id")

  requests PetsitterRequest[]

  progresses ActivityProgress[]

  services ActivityService[]

  review  Review?
  reports Report[]

  @@map("activities")
}

model ActivityProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  content   String

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  images String[]

  @@map("activity_progresses")
}

model PetsitterRequest {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  state     State    @default(PENDING)
  price     Float?
  message   String?

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  petsitter   Petsitter @relation(fields: [petsitterId], references: [id], onDelete: Cascade)
  petsitterId String    @map("petsitter_id")

  @@map("request")
}

model Task {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now()) @map("created_at")
  status    Boolean     @default(false)
  type      ServiceType @map("service_type")
  detail    String

  activityServiceId String          @map("activity_service_id")
  activityService   ActivityService @relation(fields: [activityServiceId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ActivityService {
  id String @id @default(uuid())

  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String @map("pet_id")

  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String   @map("activity_id")

  tasks Task[]

  @@map("activity_services")
}
